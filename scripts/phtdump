#!/bin/bash

FTP_URL="ftp://ftp.jgi-psf.org/pub/compgen/phytozome/v9.0/"
ESEARCH="http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy&field=Scientific+Name&term="
EFETCH="http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id="
FTP_USER="anonymous:$USER@kbase.us"
CURL="curl --user $FTP_USER"
STAGING_DIR='./staging'
SCRIPT_DIR=`cd $(dirname $0) && pwd -P`
PHT_USAGE="$0 [options] <command> [<arguments>]

Dump genomes from Phytozome.org in KBase-formatted exchange file

Available options:
    -f <path>   FTP path to use for fetching genomes
         Default: $FTP_URL
    -s <dir>    Staging directory to use
         Default: $STAGING_DIR
    
Available commands:
    run         Run entire pipeline from scratch

    genomes     Fetch available genomes

    fetch       Just fetch the raw Phytozome files

    package     Package the files for submission

    help        This help message

    clean       Remove all generated files

The 'run', 'fetch', and 'package' commands accept a GENOME argument that lets
you run the command only on the specified genome.

"

function pht_cmd_help {
    cat <<USAGE
$PHT_USAGE
USAGE
    exit 0
}

function pht_cmd_fetch {
    local genome=$1
    
    if [ -n "$genome" ]; then
        _fetch_single_genome $genome
    else
        _get_genome_list
        while read genome; do
            _fetch_single_genome $genome
        done < .genomes
    fi
}

function pht_cmd_package {
    local genome=$1
    if [ ! -e "$STAGING_DIR" ]; then
        echo "Staging directory $STAGING_DIR does not exist!"
        exit 1
    fi
    if [ -n "$genome" ]; then
        _package_single_genome $genome
    else
        _get_genome_list
        while read genome; do
            _package_single_genome $genome
        done < .genomes
    fi
}

function pht_cmd_genomes {
    _get_genome_list
    cat .genomes
}

function pht_cmd_clean {
    rm .genomes
    rm -rf $STAGING_DIR/*
}

function pht_cmd_run {
    pht_cmd_fetch $@
    pht_cmd_package $@
}

# BEGIN (PRIVATE FUNCTIONS)
function gzcat {
    gunzip -c "$@"
}

# Get and cache list of genomes
function _get_genome_list {
    if [ ! -e .genomes ]; then
        $CURL -s "$FTP_URL" -l | grep '^[A-Z]' > .genomes
    fi
}

# Fetch a single genome
function _fetch_single_genome () {
    local genome=$1
    _get_genome_list
    if [ $(grep -c "^$genome$" .genomes) -eq 0 ]; then
        echo "Cannot find genome $genome in Phytozome"
        exit 1
    fi
    dumpdir="$STAGING_DIR/$genome/dump"
    echo "Dumping genome $genome into $dumpdir..."
    mkdir -p $dumpdir
    cd $dumpdir
    if [ ! -e ".genome.$genome" ]; then
        $CURL -s "$FTP_URL/$genome/" -l > .genome.$genome
    fi
    local prefix=$(cat .genome.$genome | grep readme | sed 's/_readme.txt$//')
    _fetch \
        "$genome/assembly/$prefix.fa.gz" \
        "assembly.fa.gz" \
        "assembly"
    _fetch \
        "$genome/annotation/${prefix}_annotation_info.txt.gz" \
        "annotation_info.txt.gz" \
        "annotation info"
    _fetch \
        "$genome/annotation/${prefix}_gene_exons.gff3.gz" \
        "genes.gff.gz" \
        "gene features"
    _fetch \
        "$genome/annotation/${prefix}_protein.fa.gz" \
        "proteins.fa.gz" \
        "proteins"
    _fetch \
        "$genome/gbrowse/GBrowse.conf" \
        "gbrowse.conf" \
        "genome information"
    echo "Done fetching genome $genome"
    cd - > /dev/null
}

function _fetch () {
    local path=$1
    local dest=$2
    local msg=$3
    echo "Fetching $msg..."
    $CURL -C - "$FTP_URL/$path" -o $dest
}

function _package_single_genome () {
    local genome=$1
    cd $STAGING_DIR/$genome
    echo "Packaging $genome"
    echo "Generating metadata"
    _generate_metadata $genome
    echo "Generating annotations"
    gzcat dump/genes.gff.gz | $SCRIPT_DIR/gff3_to_kbase.pl > ./features.tab
    echo "Generating functions and ontology files"
    gzcat dump/annotation_info.txt.gz | $SCRIPT_DIR/convert_jgi_info.pl
    echo "Generating contigs"
    gzcat dump/assembly.fa.gz > ./contigs.fa
    echo "Generating proteins"
    gzcat dump/proteins.fa.gz > ./proteins.fa
    local version=$(awk '/^assembly-version/{getline;print}' metadata.tbl)
    local target=$(echo "$genome.$version" | tr ' ' '-');
    mkdir -p $target
    mv contigs.fa \
        proteins.fa \
        metadata.tbl \
        features.tab \
        functions.tab \
        ontology.tab $target/
    rm -f $target.tar.gz
    tar zcvf $target.tar.gz $target
    echo "Done! Package in $target.tar.gz"
    cd - > /dev/null
}

function _generate_metadata () {
    local genome=$1
    local gtoken=$(echo $genome | sed 's/[-_]//g')
    local desc=`awk "/^path.*Phytozome\/$gtoken\.conf$/{print l;exit 0}{l=\\\$0}" ./dump/gbrowse.conf | sed -e 's/^description *\= *//' -e 's/ - /,/'`
    local species=$(echo $desc | cut -f1 -d,);
    local version=$(echo $desc | cut -f2 -d, | perl -pe 's|[ /]|-|g;s/-(v(ersion)?)?(?=\d)//');
    echo "VERSION $version"
    local common=`awk "/$species/{print l;exit 0}{l=\\\$0}" ./dump/gbrowse.conf | sed 's/[^0-9a-zA-Z_ ]//g'`
    local gid=`curl -s "$ESEARCH$species" | sed -n '/<Id>/s/<[^>]*>//gp'`
    local lineage=`curl -s "$EFETCH$gid" | sed -n -e '/<Lineage>/s/<[^>]*>//gp' | sed -e 's/; /;/g' -e 's/^ *//'| tr ';' '\n'`
    if [ -z "$species" ] || [ -z "$version" ]; then
        echo "Unable to get metadata for $genome (species:$species version:$version)"
        exit 1
    fi
    cat <<EOM > metadata.tbl
assembly-version
$version
//
name
$species
//
common-name
$common
//
classification
$lineage
//
source
Phytozome
EOM
}

# END   (PRIVATE FUNCTIONS)

while getopts "s:f:" opt; do
    case $opt in
        s)
            STAGING_DIR="$OPTARG"
            ;;
        f)
            FTP_BASEDIR="$OPTARG"
            ;;
        *)
            echo "Unsupported option -$opt"
            iris_cmd_help
            ;;
    esac
done
shift $((OPTIND-1))

cmd=${1:-help}
if [ `declare -f pht_cmd_$cmd | wc -l` -gt 1 ]; then
    shift
    eval "pht_cmd_$cmd \$@"
else
    echo "Unrecognized command '$cmd'. Try '$0 help'."
fi
