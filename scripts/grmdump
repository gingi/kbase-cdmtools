#!/usr/bin/make -f

PACKAGE      = cdmtools

release     ?= 39

SCRIPTDIR    = $(dir $(firstword $(MAKEFILE_LIST)))
FTP_BASEDIR ?= "ftp://anonymous@ftp.gramene.org/pub/gramene/release$(release)/data"
FASTADIR    ?= "$(FTP_BASEDIR)/fasta"
GFFDIR      ?= "$(FTP_BASEDIR)/gff"
STAGING_DIR ?= "./staging/gramene/$(release)"
ESEARCH      = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy&field=Scientific+Name&term="
EFETCH       = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id="
CURL         = "curl"

dbhost ?= mysql.gramene.org
dbuser ?= gramene_web
dbpass ?= password

genome ?=
stage_dir   = $(STAGING_DIR)/$(genome)
dump_dir    = $(stage_dir)/dump
package_dir = $(stage_dir)/package

define USAGE
grmdump [options] <command> [<arguments>]

Available options:
  FTP_BASEDIR=<path>: FTP path to use for fetching genomes
    Default: $(FTP_BASEDIR)
  STAGING_DIR=<path>: Staging directory to use
    Default: $(STAGING_DIR)
	  
Available commands:
  run		  Run entire pipeline from scratch
  genomes	  Fetch available genomes
  dump		  Just dump the raw Gramene data sets
  package	  Package the files for submission
  help		  This help message
 
Currently no command-arguments are supported.
endef
export USAGE

checkurl = $(shell curl -I "$(1)")

help:
	@ echo "$$USAGE"

init:
	@ mkdir -p $(STAGING_DIR)

$(stage_dir):
	@ mkdir -p $(stage_dir)

$(dump_dir):
	@ mkdir -p $(dump_dir)

$(package_dir):
	@ mkdir -p $(package_dir)

$(dump_dir)/assembly.fa.gz:
	@ if [ ! -e "$(dump_dir)/.done.assembly" ]; then \
		echo "Fetching genome contigs"; \
		fname=`$(CURL) -s -l $(FASTADIR)/$(genome)/dna/ | \
			grep '.dna.toplevel.fa.gz'`; \
		$(CURL) -C - $(FASTADIR)/$(genome)/dna/$$fname -o $(dump_dir)/assembly.fa.gz; \
		touch $(dump_dir)/.done.assembly; \
	fi

$(dump_dir)/annotation_info.txt.gz:
	@ echo "Fetching annotation info"

$(dump_dir)/proteins.fa.gz: $(call checkurl,$@)
	@ echo "Checked URL? $@"
	@ if [ ! -e "$(dump_dir)/.done.proteins" ]; then \
		echo "Fetching proteins"; \
		fname=`$(CURL) -s -l $(FASTADIR)/$(genome)/pep/ | \
		grep '.pep.all.fa.gz'`; \
		$(CURL) -C - $(FASTADIR)/$(genome)/pep/$$fname -o $(dump_dir)/proteins.fa.gz; \
		touch $(dump_dir)/.done.proteins; \
	fi

$(dump_dir)/genes.gff.gz:
	@ if [ ! -e "$(dump_dir)/.done.gff" ]; then \
		echo "Fetching GFF data"; \
		$(CURL) -C - $(GFFDIR)/$(genome).gff.gz -o $(dump_dir)/genes.gff.gz; \
		touch $(dump_dir)/.done.gff; \
	fi
	
fetch-$(genome): $(stage_dir) $(dump_dir) \
	$(dump_dir)/assembly.fa.gz \
	$(dump_dir)/proteins.fa.gz \
	$(dump_dir)/annotation_info.txt.gz \
	$(dump_dir)/genes.gff.gz	

$(package_dir)/features.tab: $(dump_dir)/genes.gff.gz
	@ echo "Packaging annotations"
	@ gunzip -c $(dump_dir)/genes.gff.gz | $(SCRIPTDIR)/gff3_to_kbase.pl > \
		$(package_dir)/features.tab

package-$(genome): $(stage_dir) $(package_dir) \
	$(package_dir)/features.tab

run: init fetch-$(genome) package-$(genome)

.genomes.gramene:
	@ $(CURL) -s -l $(FASTADIR)/ > .genomes.gramene

genomes: .genomes.gramene
	@ echo "Available genomes:"
	@ cat .genomes.gramene
	
clean:
	@ rm -f .genomes.gramene
	@ find $(STAGING_DIR) -name ".done*" -exec rm {} \;

.PHONY: help

all: $(genome)