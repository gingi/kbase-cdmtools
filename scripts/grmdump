#!/usr/bin/make -f

PACKAGE      = cdmtools

release     ?= 39

SCRIPTDIR    = $(dir $(firstword $(MAKEFILE_LIST)))
SQLDIR       = $(SCRIPTDIR)/../sql

FTP_BASEDIR ?= \
	 ftp://anonymous@ftp.gramene.org/pub/gramene/release$(release)/data
FASTADIR    ?= $(FTP_BASEDIR)/fasta
GFFDIR      ?= $(FTP_BASEDIR)/gff
GODIR       ?= $(FTP_BASEDIR)/ontology/go

STAGING_DIR ?= ./staging/gramene/$(release)
ESEARCH      = http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy&field=Scientific+Name&term=
EFETCH       = http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id=
CURL         = curl

dbhost ?= mysql.gramene.org
dbuser ?= gramene_web
dbpass ?= password

gffkey = $(genome)
ifeq "$(gffkey)" 'oryza_sativa'
  override gffkey=oryza_sativa_japonica
endif
ifeq "$(gffkey)" 'oryza_indica'
  override gffkey=oryza_sativa_indica
endif

stage_dir   = $(STAGING_DIR)/$(genome)
dump_dir    = $(stage_dir)/dump
package_dir = $(stage_dir)/package

MYSQL = MYSQL_PWD=$(dbpass) mysql -h$(dbhost) -u$(dbuser)

define USAGE
grmdump [options] <command> [<arguments>]

Available options:
  FTP_BASEDIR=<path>: FTP path to use for fetching genomes
    Default: $(FTP_BASEDIR)
  STAGING_DIR=<path>: Staging directory to use
    Default: $(STAGING_DIR)
	  
Available commands:
  run		  Run entire pipeline from scratch
  genomes	  Fetch available genomes
  dump		  Just dump the raw Gramene data sets
  package	  Package the files for submission
  help		  This help message
 
Currently no command-arguments are supported.
endef
export USAGE

fetch = \
	$$(eval fname := $$(shell $(CURL) -s -l $(1)/ | grep '$(2)')) \
	$$(info Genome $(genome)) \
	$$(info Fetching $(3) ($$(fname))...) \
	$$(if $(filter $$(fname),),\
		$$(error Cannot find remote $(3) for $$(genome)),\
		$$(shell $(CURL) -C - $(1)/$$(fname) -o $@))

help:
	@ echo "$$USAGE"

$(STAGING_DIR):
	@ mkdir -p $(STAGING_DIR)

init: $(STAGING_DIR)

$(stage_dir):
	@ mkdir -p $(stage_dir)

$(dump_dir):
	@ mkdir -p $(dump_dir)

$(package_dir):
	@ mkdir -p $(package_dir)

$(dump_dir)/assembly.fa.gz:
	@ $(eval $(call fetch,$(FASTADIR)/$(genome)/dna,.dna.toplevel.fa.gz,contigs))

$(dump_dir)/proteins.fa.gz:
	@ $(eval $(call fetch,$(FASTADIR)/$(genome)/pep,.pep.all.fa.gz,proteins))

$(dump_dir)/genes.gff.gz:
	@ $(eval $(call fetch,$(GFFDIR),$(gffkey).gff.gz,annotations))

$(dump_dir)/ontology.gaf:
	@ $(eval $(call fetch,$(GODIR),go_ensembl_$(gffkey).gaf,ontology))
	
fetch-$(genome): $(stage_dir) $(dump_dir) \
	$(dump_dir)/assembly.fa.gz \
	$(dump_dir)/proteins.fa.gz \
	$(dump_dir)/genes.gff.gz \
	$(dump_dir)/ontology.gaf

$(genome)-dbname: $(dbname)
	@ echo "Getting database name"
	@ $(eval dbname := $(shell $(MYSQL) -e "show databases" \
		| grep "^$(genome)_core_$(release)"))

$(package_dir)/features.tab: $(dump_dir)/genes.gff.gz
	@ echo "Packaging annotations"
	@ gunzip -c $(dump_dir)/genes.gff.gz | $(SCRIPTDIR)/gff3_to_kbase.pl > \
		$(package_dir)/features.tab

$(package_dir)/functions.tab: $(genome)-dbname
	@ echo "Packaging functions"
	@ $(MYSQL) -N $(dbname) < $(SQLDIR)/ensembl_feature_functions.sql \
		> $(package_dir)/functions.tab

$(package_dir)/ontology.tab: $(dump_dir)/ontology.gaf
	@ echo "Packaging ontologies"
	@ $(SCRIPTDIR)/gaf_to_kbase.pl --output $(package_dir)/ontology.tab \
		$(dump_dir)/ontology.gaf

$(package_dir)/metadata.tbl: $(genome)-dbname
	@ echo "Packaging metadata"
	@ $(SCRIPTDIR)/generate.metadata.table.pl \
		--database $(dbname) \
		--user $(dbuser) \
		--host $(dbhost) \
		--pass $(dbpass) > $(package_dir)/metadata.tbl

$(package_dir)/contigs.fa: $(dump_dir)/assembly.fa.gz
	@ echo "Packaging contigs"
	@ gunzip -c $(dump_dir)/assembly.fa.gz | \
		perl -plane 's/\s+.*$$//' > $(package_dir)/contigs.fa

$(package_dir)/proteins.fa: $(dump_dir)/proteins.fa.gz
	@ echo "Packaging proteins"
	@ gunzip -c $(dump_dir)/proteins.fa.gz | \
		perl -plane 's/\s+.*$$//' > $(package_dir)/proteins.fa

$(package_dir)/provenance.json: $(package_dir)/metadata.tbl
	@ echo "Creating provenance file"
	@ $(SCRIPTDIR)/gramene-provenance.pl -o $(package_dir)/provenance.json \
		$(package_dir)/metadata.tbl

package-$(genome): $(stage_dir) $(package_dir) \
	$(package_dir)/features.tab \
	$(package_dir)/functions.tab \
	$(package_dir)/ontology.tab \
	$(package_dir)/contigs.fa \
	$(package_dir)/proteins.fa \
	$(package_dir)/metadata.tbl \
	$(package_dir)/provenance.json
	@ $(eval version := $(shell awk '/^assembly-version/{getline;print}' \
		$(package_dir)/metadata.tbl))
	@ $(eval prefix := $(shell echo $(genome) | \
		perl -plane 's/^([a-z])[a-z]+_([a-z]+)$$/\U$$1\E$$2/').$(version))
	@ cp -r $(package_dir) $(stage_dir)/$(prefix)
	@ tar zcvf $(stage_dir)/$(prefix).tar.gz -C $(stage_dir) $(prefix)
	@ rm -rf $(stage_dir)/$(prefix)
	@ echo "Package placed in $(stage_dir)/$(prefix).tar.gz"

run: init fetch-$(genome) package-$(genome)

.genomes.gramene:
	@ $(CURL) -s -l $(FASTADIR)/ > .genomes.gramene

genomes: .genomes.gramene
	@ echo "Available genomes:"
	@ cat .genomes.gramene
	
clean:
	@ rm -f .genomes.gramene

.PHONY: help init all run genomes clean

all: help