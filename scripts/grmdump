#!/usr/bin/make -f

PACKAGE      = cdmtools

release     ?= 39

SCRIPTDIR    = $(dir $(firstword $(MAKEFILE_LIST)))
FTP_BASEDIR ?= ftp://anonymous@ftp.gramene.org/pub/gramene/release$(release)/data
FASTADIR    ?= $(FTP_BASEDIR)/fasta
GFFDIR      ?= $(FTP_BASEDIR)/gff
STAGING_DIR ?= ./staging/gramene/$(release)
ESEARCH      = http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=taxonomy&field=Scientific+Name&term=
EFETCH       = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=taxonomy&id="
CURL         = "curl"

dbhost ?= mysql.gramene.org
dbuser ?= gramene_web
dbpass ?= password

genome ?= hi
stage_dir   = $(STAGING_DIR)/$(genome)
dump_dir    = $(stage_dir)/dump
package_dir = $(stage_dir)/package

define USAGE
grmdump [options] <command> [<arguments>]

Available options:
  FTP_BASEDIR=<path>: FTP path to use for fetching genomes
    Default: $(FTP_BASEDIR)
  STAGING_DIR=<path>: Staging directory to use
    Default: $(STAGING_DIR)
	  
Available commands:
  run		  Run entire pipeline from scratch
  genomes	  Fetch available genomes
  dump		  Just dump the raw Gramene data sets
  package	  Package the files for submission
  help		  This help message
 
Currently no command-arguments are supported.
endef
export USAGE

fetch = \
	$(info Fetching $(3)...) \
	$(eval fname := $(shell $(CURL) -s -l $(1)/ | grep '$(2)')) \
	ifeq ($(fname),) \
		$(error Cannot find remote $(3) for $(genome)) \
	else \
		$(CURL) -C - $(1)/$(fname) -o $@ \
	endif

help:
	@ echo "$$USAGE"

$(STAGING_DIR):
	@ mkdir -p $(STAGING_DIR)

init: $(STAGING_DIR)

$(stage_dir):
	@ mkdir -p $(stage_dir)

$(dump_dir):
	@ mkdir -p $(dump_dir)

$(package_dir):
	@ mkdir -p $(package_dir)

$(dump_dir)/assembly.fa.gz:
	@ $(info $(call fetch,$(FASTADIR)/$(genome)/dna,.dna.toplevel.fa.gz,contigs))

$(dump_dir)/annotation_info.txt.gz:
	@ echo "Fetching annotation info"

$(dump_dir)/proteins.fa.gz:
	@ $(info $(call fetch,$(FASTADIR)/$(genome)/pep,.pep.all.fa.gz,proteins))

$(dump_dir)/genes.gff.gz:
	@ $(info $(call fetch,$(GFFDIR),$(genome).gff.gz,annotations))
	
fetch-$(genome): $(stage_dir) $(dump_dir) \
	$(dump_dir)/assembly.fa.gz \
	$(dump_dir)/proteins.fa.gz \
	$(dump_dir)/annotation_info.txt.gz \
	$(dump_dir)/genes.gff.gz	

$(package_dir)/features.tab: $(dump_dir)/genes.gff.gz
	@ echo "Packaging annotations"
	@ gunzip -c $(dump_dir)/genes.gff.gz | $(SCRIPTDIR)/gff3_to_kbase.pl > \
		$(package_dir)/features.tab

package-$(genome): $(stage_dir) $(package_dir) \
	$(package_dir)/features.tab

run: init fetch-$(genome) package-$(genome)

.genomes.gramene:
	@ $(CURL) -s -l $(FASTADIR)/ > .genomes.gramene

genomes: .genomes.gramene
	@ echo "Available genomes:"
	@ cat .genomes.gramene
	
clean:
	@ rm -f .genomes.gramene

.PHONY: help init all run genomes clean

all: help